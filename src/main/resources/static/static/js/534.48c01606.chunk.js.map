{"version":3,"file":"static/js/534.48c01606.chunk.js","mappings":"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","sources":["utils/index.ts","views/chat/singleChatPage/index.tsx"],"sourcesContent":["interface Friend {\n  uid?: any\n  username: string\n  password?: any\n  salt?: any\n  gender?: any\n  avatar?: string\n  email?: any\n  phone?: any\n  createdTime?: any\n  friendList?: any\n  groupList?: any\n}\ninterface Message {\n  fromUser: string\n  toUser: string\n  content: string\n  sendTime: number\n  mid: number\n}\ntype MessagesList = Message[]\ntype MessageHistoryContainer = Map<Friend, MessagesList>\nexport const generateMessageHistoryContainer = (\n  friendsList: any,\n  messagesList: any\n): MessageHistoryContainer => {\n  const map = new Map()\n\n  friendsList.forEach((friend: any) => {\n    map.set(friend, [])\n    messagesList.forEach((message: any) => {\n      if (\n        friend.username === message.fromUser ||\n        friend.username === message.toUser\n      ) {\n        map.get(friend).push(message)\n      }\n    })\n  })\n  return map\n}\n","import React, { memo, useCallback, useEffect, useState } from 'react'\nimport type { FC, ReactNode, KeyboardEvent, ChangeEvent } from 'react'\nimport { useParams } from 'react-router-dom'\nimport { appShallowEqual, useAppDispatch, useAppSelector } from '@/store'\nimport { generateMessageHistoryContainer } from '@/utils'\nimport { createWebsocket, getWebSocket } from '@/service/socket'\nimport dayjs from 'dayjs'\nimport moreIcon from '@/svg/More Icon.svg'\nimport searchIcon from '@/svg/Search Messages.svg'\nimport callIcon from '@/svg/Call Icon.svg'\nimport emojiIcon from '@/svg/Emoji Icon.svg'\nimport sendIcon from '@/svg/Send Icon.svg'\nimport { addMessage } from '@/store/module/message'\n\ninterface IProps {\n  children?: ReactNode\n}\n\ninterface Message {\n  mid: number\n  fromUser: string\n  toUser: string\n  content: string\n  sendTime: number\n}\ntype MessagesList = Message[]\n\ninterface Friend {\n  uid?: any\n  username: string\n  password?: any\n  salt?: any\n  gender?: any\n  avatar?: string\n  email?: any\n  phone?: any\n  createdTime?: any\n  friendList?: any\n  groupList?: any\n}\n\nconst ChatPage: FC<IProps> = (props) => {\n  const dispathch = useAppDispatch()\n  const { chatId } = useParams() // 获取动态路由参数\n  const [message, setMessage] = useState('') //保存消息内容\n  const [messageContent, setMessageContent] = useState<MessagesList>([]) //保存所有历史消息\n  const [friendInfo, setFriendInfo] = useState<Friend>({} as Friend)\n\n  /**\n   * 从messagestore获取好友列表、群组列表、好友信息记录、群组信息记录\n   */\n  const { friendsList, messagesList } = useAppSelector((state) => {\n    return {\n      friendsList: state.message.friendsList,\n      messagesList: state.message.messagesList,\n    }\n  }, appShallowEqual)\n\n  useEffect(() => {\n    createWebsocket()\n  }, [])\n  useEffect(() => {\n    const messagesContainer = generateMessageHistoryContainer(\n      friendsList,\n      messagesList\n    )\n    let newFriendInfo: Friend = {} as Friend\n    friendsList.forEach((item) => {\n      if (item.username === chatId) {\n        newFriendInfo = item\n      }\n    })\n    setFriendInfo(newFriendInfo)\n    messagesContainer.forEach((value, key) => {\n      if (key.username === chatId) {\n        setMessageContent(value)\n      }\n    })\n  }, [chatId, friendsList, messagesList])\n\n  /**\n   * 输入框双向数据绑定\n   */\n  const changeMessageHandler = useCallback(\n    (e: ChangeEvent<HTMLInputElement>) => {\n      setMessage(e.target.value)\n    },\n    [message]\n  )\n  /**\n   * 发送信息逻辑统一处理\n   */\n  const sendMessage = () => {\n    const websocket = getWebSocket()\n    const sendTime = new Date().getTime()\n    const newMessgae = {\n      toUser: chatId || '',\n      fromUser: localStorage.getItem('username') || '',\n      content: message,\n      sendTime: sendTime,\n    }\n    dispathch(\n      addMessage({\n        toUser: chatId,\n        fromUser: localStorage.getItem('username') || '',\n        content: message,\n        sendTime: sendTime,\n        mid: '',\n      })\n    )\n    websocket.emit('sendSingleMessageEvent', newMessgae)\n    setMessage('')\n  }\n  /**\n   * 处理键盘Enter发送信息\n   */\n  const enterDownHandler = (e: KeyboardEvent<HTMLDivElement>) => {\n    if (e.code === 'Enter') {\n      sendMessage()\n    }\n  }\n\n  /**\n   * 处理点击发送信息\n   */\n  const clickSendHandler = () => {\n    sendMessage()\n  }\n\n  return (\n    <div className=\"flex flex-col items-center h-full\">\n      {/* 顶部菜单栏 */}\n      <div className=\"flex justify-between w-[57.25rem] h-[3.5rem] px-4 py-1 bg-white\">\n        {/* 左侧用户信息 */}\n        <div className=\"flex items-center w-[46.25rem] \">\n          <img\n            className=\"w-10 h-10 rounded-full mr-4\"\n            src={friendInfo.avatar}\n            alt=\"\"\n          />\n          <div className=\"flex flex-col justify-between\">\n            <div>{friendInfo.username}</div>\n            <div>{friendInfo.gender}</div>\n          </div>\n        </div>\n        {/* 右侧菜单栏 */}\n        <div className=\"flex items-center \">\n          <img className=\"w-10 h-10 cursor-pointer\" src={searchIcon} />\n          <img className=\"w-10 h-10 cursor-pointer\" src={callIcon} />\n          <img className=\"w-10 h-10 cursor-pointer\" src={moreIcon} />\n        </div>\n      </div>\n      {/* 聊天区 */}\n      <div className=\" relative w-[43.375rem] h-[41.5rem] bg-transparent\">\n        {/* 聊天信息 */}\n        <div className=\"flex flex-col justify-end h-[36.5rem] pb-4 overflow-auto\">\n          {messageContent.map((item, index) => {\n            return (\n              <div\n                className={`flex  w-full mb-4 ${\n                  item.fromUser === localStorage.getItem('username')\n                    ? 'justify-end '\n                    : 'justify-start'\n                }`}\n                key={index}\n              >\n                <div\n                  className={`flex flex-col max-w-[25.125rem] px-3 py-1 rounded-xl ${\n                    item.fromUser === localStorage.getItem('username')\n                      ? 'bg-[#78E378]'\n                      : 'bg-white'\n                  }`}\n                >\n                  <div>{item.content}</div>\n                  <div className=\"flex justify-end mt-1 text-xs\">\n                    {dayjs(item.sendTime).format('YYYY.MM.DD hh.mm')}\n                  </div>\n                </div>\n              </div>\n            )\n          })}\n        </div>\n        {/* 输入框 */}\n        <div\n          className=\"absolute bottom-6 w-full h-14 \"\n          onKeyDown={enterDownHandler}\n        >\n          <img\n            className=\"absolute left-4 top-4 cursor-pointer\"\n            src={emojiIcon}\n            alt=\"\"\n          />\n          <input\n            className=\"w-full h-full px-14 py-[1.125rem] rounded-xl bg-white outline-none\"\n            type=\"text\"\n            value={message}\n            onChange={changeMessageHandler}\n          />\n          <img\n            className=\"absolute right-4 top-4 cursor-pointer\"\n            src={sendIcon}\n            onClick={clickSendHandler}\n          />\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default memo(ChatPage)\n"],"names":["generateMessageHistoryContainer","friendsList","messagesList","map","Map","forEach","friend","set","message","username","fromUser","toUser","get","push","ChatPage","props","dispathch","useAppDispatch","chatId","useParams","_useState","useState","_useState2","_slicedToArray","setMessage","_useState3","_useState4","messageContent","setMessageContent","_useState5","_useState6","friendInfo","setFriendInfo","_useAppSelector","useAppSelector","state","appShallowEqual","useEffect","createWebsocket","messagesContainer","newFriendInfo","item","value","key","changeMessageHandler","useCallback","e","target","sendMessage","websocket","getWebSocket","sendTime","Date","getTime","newMessgae","localStorage","getItem","content","addMessage","mid","emit","_jsxs","className","children","_jsx","src","avatar","alt","gender","searchIcon","callIcon","moreIcon","index","concat","dayjs","format","onKeyDown","code","emojiIcon","type","onChange","sendIcon","onClick","memo"],"sourceRoot":""}